generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Faculty {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(255)
  abbreviation    String           @db.VarChar(10)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  subjects        Subject[]
  students        Student[]
  groups          Group[]
  specializations Specialization[]
}

enum Semester {
  ONE
  TWO
}

model Subject {
  id              Int              @id @default(autoincrement())
  title           String           @db.VarChar(255)
  description     String           @db.Text
  file            String?          @db.Text
  semester        Semester         @default(ONE)
  year            Year             @default(ONE)
  faculty         Faculty          @relation(fields: [facultyId], references: [id])
  facultyId       Int
  abbreviation    String           @db.VarChar(10)
  published       Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  students        Student[]
  groups          Group[]
  specializations Specialization[]
}

enum Role {
  STUDENT
  ADMIN
  EDITOR
}

enum Year {
  ONE
  TWO
  THREE
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student?
}

model Specialization {
  id           Int       @id @default(autoincrement())
  title        String    @db.VarChar(255)
  abbreviation String    @db.VarChar(10)
  faculty      Faculty   @relation(fields: [facultyId], references: [id])
  facultyId    Int
  subjects     Subject[]
  students     Student[]
  groups       Group[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Student {
  id               Int            @id @default(autoincrement())
  sn               String         @unique
  year             Year           @default(ONE)
  user             User           @relation(fields: [userId], references: [id])
  userId           Int            @unique
  faculty          Faculty        @relation(fields: [facultyId], references: [id])
  facultyId        Int
  specialization   Specialization @relation(fields: [specializationId], references: [id])
  specializationId Int
  subjects         Subject[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  verified         Boolean        @default(false)
}

model Group {
  id               Int            @id @default(autoincrement())
  title            String         @db.VarChar(255)
  faculty          Faculty        @relation(fields: [facultyId], references: [id])
  facultyId        Int
  specializations  Specialization[]
  subjects         Subject[]
  semester         Semester       @default(ONE)
  year             Year           @default(ONE)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Settings {
  id        Int      @id @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dateStart DateTime
  dateEnd   DateTime
}

model Feedback {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}